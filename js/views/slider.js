// Generated by CoffeeScript 1.10.0
var SliderItemView, SliderView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SliderView = (function(superClass) {
  extend(SliderView, superClass);

  function SliderView() {
    return SliderView.__super__.constructor.apply(this, arguments);
  }

  SliderView.container = $(".slider-container");

  SliderView.prototype.template = _.template("<div class=\"slider-wrapper\">\n  <div class=\"slider navigate left\"></div>\n  <div class=\"slider middle\">\n    <div class=\"slider-container\"></div>\n  </div>\n  <div class=\"slider navigate right\"></div>\n</div>");

  SliderView.prototype.initialize = function() {
    this.collection = new Slider;
    this.render();
    this.container = $(".slider-container");
    return this.slideWidth = this.container.parent().outerWidth() / 2;
  };

  SliderView.prototype.moveLeft = function() {
    return this.container.css({
      'left': -this.slideWidth
    }).find(".slider-item:last").prependTo(this.container).parent().animate({
      'left': 0
    }, 500);
  };

  SliderView.prototype.moveRight = function() {
    return this.container.animate({
      left: -this.slideWidth
    }, 500, (function(_this) {
      return function() {
        return _this.container.find(".slider-item:first").appendTo(_this.container).parent().css({
          'left': 0
        });
      };
    })(this));
  };

  SliderView.prototype.render = function() {
    $(this.el).html(this.template);
    return this.collection.fetch({
      data: {
        type: 'slider'
      },
      success: (function(_this) {
        return function(data) {
          return data.each(function(item) {
            return _this.renderItem(item);
          }, _this);
        };
      })(this)
    });
  };

  SliderView.prototype.renderItem = function(item) {
    var sliderItemView;
    sliderItemView = new SliderItemView({
      model: item
    });
    return this.container.append(sliderItemView.render().el);
  };

  SliderView.prototype.events = {
    "click .right": "moveRight",
    "click .left": "moveLeft"
  };

  return SliderView;

})(Backbone.View);

SliderItemView = (function(superClass) {
  extend(SliderItemView, superClass);

  function SliderItemView() {
    return SliderItemView.__super__.constructor.apply(this, arguments);
  }

  SliderItemView.prototype.tagName = 'div';

  SliderItemView.prototype.className = 'slider-item';

  SliderItemView.prototype.template = _.template("<img src=\"images/<%= img %>\">");

  SliderItemView.prototype.render = function() {
    $(this.el).html(this.template(this.model.toJSON()));
    return this;
  };

  return SliderItemView;

})(Backbone.View);
