// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$(function() {
  var MenuView, menuView;
  MenuView = (function(superClass) {
    extend(MenuView, superClass);

    function MenuView() {
      this.mouseLeave = bind(this.mouseLeave, this);
      this.mouseEnter = bind(this.mouseEnter, this);
      this.show_list = bind(this.show_list, this);
      this.render = bind(this.render, this);
      return MenuView.__super__.constructor.apply(this, arguments);
    }

    MenuView.prototype.showTimer = null;

    MenuView.prototype.hideTimer = null;

    MenuView.prototype.showDelay = 300;

    MenuView.prototype.hideDelay = 300;

    MenuView.prototype.currentItem = null;

    MenuView.prototype.initialize = function() {
      return this.render();
    };

    MenuView.prototype.render = function() {
      return $.get("templates/menu.html", (function(_this) {
        return function(data) {
          var template;
          template = _.template(data);
          return $(_this.el).html(template());
        };
      })(this), "html");
    };

    MenuView.prototype.show_list = function(item) {
      this.showTimer = null;
      console.log("show list, showtimer = " + this.showTimer);
      return $(item).find(".menu-list").show();
    };

    MenuView.prototype.hide_list = function(item) {
      this.hideTimer = null;
      console.log("hidelist");
      return $(item).find(".menu-list").hide();
    };

    MenuView.prototype.startTimer = function(callback, target, delay) {
      return setTimeout(function() {
        return callback(target);
      }, delay);
    };

    MenuView.prototype.mouseEnter = function(e) {
      var target;
      console.log("enter. showtimer = " + this.showTimer + ", hideTimer = " + this.hideTimer);
      target = e.target;
      if (this.hideTimer != null) {
        clearTimeout(this.hideTimer);
        this.hideTimer = null;
        return;
      }
      return this.showTimer = this.startTimer(this.show_list, target, this.showDelay);
    };

    MenuView.prototype.mouseLeave = function(e) {
      var target;
      console.log("leave. showtimer = " + this.showTimer + ", hideTimer = " + this.hideTimer);
      target = e.target;
      if (this.showTimer != null) {
        clearTimeout(this.showTimer);
        return this.showTimer = null;
      } else {
        console.log("leave else");
        this.hideTimer = this.startTimer(this.hide_list, target, this.hideDelay);
        return console.log("leave else" + this.hideTimer);
      }
    };

    MenuView.prototype.events = {
      'mouseenter .menu-item': 'mouseEnter',
      'mouseleave .menu-item': 'mouseLeave'
    };

    return MenuView;

  })(Backbone.View);
  return menuView = new MenuView({
    el: "#menu"
  });
});
