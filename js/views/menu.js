// Generated by CoffeeScript 1.10.0
var ItemView, PanelView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PanelView = (function(superClass) {
  extend(PanelView, superClass);

  function PanelView() {
    this.hide_list = bind(this.hide_list, this);
    this.show_list = bind(this.show_list, this);
    return PanelView.__super__.constructor.apply(this, arguments);
  }

  PanelView.prototype.el = "#menu";

  PanelView.prototype.showTimer = null;

  PanelView.prototype.hideTimer = null;

  PanelView.prototype.showDelay = 500;

  PanelView.prototype.hideDelay = 500;

  PanelView.prototype.currentItem = null;

  PanelView.prototype.initialize = function(data) {
    console.log(data);
    this.collection = new Panel(data);
    console.log(this.collection);
    return this.render();
  };

  PanelView.prototype.render = function() {
    return this.collection.each(function(item) {
      console.log(item);
      return this.renderItem(item);
    }, this);
  };

  PanelView.prototype.renderItem = function(item) {
    var itemView;
    itemView = new ItemView(item);
    return $(this.el).append(itemView.render().el);
  };

  PanelView.prototype.show_list = function(item) {
    this.showTimer = null;
    if (this.currentItem != null) {
      this.hide_list(this.currentItem);
    }
    $(item).find(".menu-list").show();
    return this.currentItem = item;
  };

  PanelView.prototype.hide_list = function(item) {
    this.hideTimer = null;
    $(item).find(".menu-list").hide();
    return this.currentItem = null;
  };

  PanelView.prototype.startTimer = function(callback, target, delay) {
    return setTimeout(function() {
      return callback(target);
    }, delay);
  };

  PanelView.prototype.mouseEnter = function(e) {
    var target;
    target = e.currentTarget;
    if ((this.hideTimer != null) && this.currentItem === target) {
      clearTimeout(this.hideTimer);
      return this.hideTimer = null;
    } else {
      return this.showTimer = this.startTimer(this.show_list, target, this.showDelay);
    }
  };

  PanelView.prototype.mouseLeave = function(e) {
    var target;
    target = e.currentTarget;
    if (this.showTimer != null) {
      clearTimeout(this.showTimer);
      return this.showTimer = null;
    } else {
      return this.hideTimer = this.startTimer(this.hide_list, target, this.hideDelay);
    }
  };

  PanelView.prototype.events = {
    'mouseenter .menu-item': 'mouseEnter',
    'mouseleave .menu-item': 'mouseLeave'
  };

  return PanelView;

})(Backbone.View);

ItemView = (function(superClass) {
  extend(ItemView, superClass);

  function ItemView() {
    return ItemView.__super__.constructor.apply(this, arguments);
  }

  ItemView.prototype.tagName = 'div';

  ItemView.prototype.className = 'menu-item';

  ItemView.prototype.template = _.template('<div class="menu-list"></div>');

  ItemView.prototype.render = function() {
    $(this.el).html(this.template());
    return this;
  };

  return ItemView;

})(Backbone.View);
